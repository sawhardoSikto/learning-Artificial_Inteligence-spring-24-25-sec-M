import heapq
graph = {
    'S': [('A', 2), ('B', 5)],
    'A': [('S', 2), ('C', 4), ('D', 7)],
    'B': [('S', 5), ('D', 3)],
    'C': [('A', 4), ('D', 1), ('G', 6)],
    'D': [('A', 7), ('B', 3), ('C', 1), ('G', 2)],
    'G': [('C', 6), ('D', 2)]
}
def ucs(graph, start, goal):
  
    queue = [(0, start, [start])]  
    visited = set()

    while queue:
        cost, current, path = heapq.heappop(queue)

        if current == goal:
            return path, cost

        if current in visited:
            continue
        visited.add(current)

        for neighbor, weight in graph[current]:
            if neighbor not in visited:
                heapq.heappush(queue, (cost + weight, neighbor, path + [neighbor]))

    return None, float('inf')

start_node = 'S'
goal_node = 'G'

path, total_cost = ucs(graph, start_node, goal_node)

if path:
    print("Path from S to G:", " -> ".join(path))
    print("Total path cost:", total_cost)
else:
    print("No path found from", start_node, "to", goal_node)
